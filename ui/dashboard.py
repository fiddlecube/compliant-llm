import streamlit as st
import json
import plotly.express as px
import plotly.graph_objects as go
import pandas as pd

def load_report(file_path):
    """Load JSON report file"""
    try:
        with open(file_path, 'r') as f:
            return json.load(f)
    except Exception as e:
        st.error(f"Error loading report: {e}")
        return None

def create_dashboard():
    """Create Streamlit dashboard for prompt security reports"""
    st.set_page_config(
        page_title="Prompt Security Report Dashboard", 
        page_icon=":shield:", 
        layout="wide"
    )
    
    st.title("üõ°Ô∏è Prompt Security Analysis Dashboard")
    
    # Sidebar for file upload
    st.sidebar.header("Report Upload")
    uploaded_file = st.sidebar.file_uploader(
        "Choose a JSON report", 
        type=['json'], 
        help="Upload the JSON report generated by prompt_secure"
    )
    
    # Default report path
    default_report_path = "reports/report.json"
    
    # Determine which report to load
    if uploaded_file is not None:
        report_data = json.load(uploaded_file)
    else:
        try:
            report_data = load_report(default_report_path)
        except:
            st.warning("No default report found. Please upload a report.")
            return
    
    if not report_data:
        st.error("Unable to load report data")
        return
    
    # Dashboard Sections
    st.header("Overview")
    
    # Metadata Section
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("Total Tests", report_data['metadata']['test_count'])
    with col2:
        st.metric("Successful Tests", report_data['metadata']['success_count'])
    with col3:
        st.metric("Failed Tests", report_data['metadata']['failure_count'])
    
    # Strategy Performance
    st.header("Strategy Performance")
    
    # Prepare strategy performance data
    strategy_performance = {}
    for test in report_data['tests']:
        strategy = test.get('strategy', 'Unknown')
        
        # Handle different possible representations of 'passed'
        passed = test.get('evaluation', {}).get('passed', False)
    
    # Convert to boolean if it's a string
    if isinstance(passed, str):
        passed = passed.lower() in ['true', '1', 'yes']
    
    if strategy not in strategy_performance:
        strategy_performance[strategy] = {'total': 0, 'passed': 0}
    
    strategy_performance[strategy]['total'] += 1
    strategy_performance[strategy]['passed'] += 1 if passed else 0
    
    # Create DataFrame for strategy performance
    strategy_df = pd.DataFrame([
        {
            'Strategy': strategy, 
            'Pass Rate': perf['passed'] / perf['total'] * 100,
            'Total Tests': perf['total']
        } for strategy, perf in strategy_performance.items()
    ])
    
    # Bar chart of strategy performance
    fig_strategy = px.bar(
        strategy_df, 
        x='Strategy', 
        y='Pass Rate', 
        title='Strategy Performance (Pass Rate)',
        labels={'Pass Rate': 'Pass Rate (%)'}
    )
    st.plotly_chart(fig_strategy, use_container_width=True)
    
    # Detailed Test Results
    st.header("Detailed Test Results")
    detailed_results_df = pd.DataFrame(report_data['tests'])
    st.dataframe(detailed_results_df)

def main():
    create_dashboard()

if __name__ == "__main__":
    main()